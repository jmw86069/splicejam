% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jambio-gg.R
\name{gene2gg}
\alias{gene2gg}
\title{Gene GRangesList to ggplot2 grob}
\usage{
gene2gg(
  gene = NULL,
  tx = NULL,
  flatExonsByGene = NULL,
  flatExonsByTx = NULL,
  geneColor = "dodgerblue",
  labelExons = TRUE,
  exonLabelAngle = 90,
  exonLabelSize = 8,
  geneSymbolColname = "gene_name",
  newValues = list(feature_type = "gap", subclass = "gap", gene_nameExon = "gap"),
  gene_order = c("first", "last"),
  return_type = c("grob", "df"),
  ref2c = NULL,
  hjust = 0.5,
  vjust = 0.5,
  direction = c("both", "x", "y"),
  compressGaps = TRUE,
  tx2geneDF = NULL,
  label_coords = NULL,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{gene}{\code{character} string of the gene to plot, compared
with \code{names(flatExonsByGene)} and \code{values(flatExonsByTx)$gene_name}.}

\item{tx}{\code{character} vector of the transcripts to plot, useful
when specifying specific transcripts. Values are matched with
\code{names(flatExonsByTx)}.}

\item{flatExonsByGene, flatExonsByTx}{\code{GRangesList} objects, named
by \code{"gene_name"} or \code{"transcript_id"} respectively, containing
disjoint (non-overlapping) exons within each GRangesList
element. The data is expected to be in the form provided by
\code{flattenExonsBy()}.}

\item{geneColor}{\code{character} color used as the base color for
exons, where the color is varied for each feature type or
subclass.}

\item{labelExons}{\code{logical} indicating whether to print text
labels beneath each exon, using the values in colname
\code{"gene_nameExon"}. Typically the gene and transcripts are
named using consistent names, in which case one exon label
is placed at the bottom of the lowest transcript for each
unique exon label.}

\item{exonLabelAngle}{\code{numeric} angle in degrees (0 to 360)
indicating how to rotate exon labels, where \code{90} is
vertical, and \code{0} is horizontal.}

\item{exonLabelSize}{\code{numeric} value or \code{unit} object from \code{grid::unit()}.
Numeric values are assumed to have unit \code{"pt"} which refers to
font point size. Used to size exon labels when \code{labelExons=TRUE}.}

\item{newValues}{argument passed to \code{addGRLgaps()} to fill
column values for newly created gap entries. It is useful
to have \code{feature_type="gap"} so gaps have a different value
than exons. It is also useful to have \code{subclass="gap"}
when there are \code{"cds"} and \code{"noncds"} entries in the
provided \code{flatExonsByGene} data.}

\item{gene_order}{\code{character} value indicating whether the
flattened gene model should be plotted \code{"first"} above the
transcript exon models, or \code{"last"} and below the
transcript exon models.}

\item{return_type}{\code{character} value indicating whether to return
the ggplot graphic object \code{"grob"}, or the data.frame
\code{"df"} used to create the ggplot object.}

\item{ref2c}{\code{list} output from \code{make_ref2compressed()} which
contains among other things, the \code{trans_grc} data of
class \code{trans} or \code{transform} depending upon the versions
of \code{scales} and \code{ggplot2} packages. It is used by
\code{ggplot2::coord_trans()} or \code{ggplot2::scale_x_continuous()}.
Note: The use of \code{trans} or \code{transform} object types should be
consistent with the version of \code{scales} and \code{ggplot2},
for example an older version from cached data cannot be
used with newer version of \code{ggplot2}. In that case the
remedy is to delete the cache and start anew. Specifically,
delete \code{sashimi_memoise}.}

\item{hjust, vjust}{\code{numeric} value to position exon labels
passed to \code{ggrepel::geom_text_repel()}.}

\item{direction}{\code{character} string passed to \code{ggrepel::geom_text_repel()}
to restrict placement of labels to one axis direction.}

\item{compressGaps}{\code{logical} indicating whether to compress gaps
between exons. When \code{ref2c} is supplied, this argument is
ignored and the supplied \code{ref2c} is used directly.}

\item{tx2geneDF}{\code{data.frame} or NULL, optionally used to help
identify matching transcripts for the requested \code{gene} value,
used when \code{"gene_name"} is not present in \code{values(flatExonsByTx)}.}

\item{label_coords}{\code{numeric} vector length 2, optional range of
genomic coordinates to restrict labels, so labels are not
arranged by \code{ggrepel::geom_text_repel()} even when \code{coord_cartesian()}
is used to zoom into a specific x-axis range.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are passed to relevant functions
as needed, including \code{make_ref2compressed()}.}
}
\description{
Gene GRangesList to ggplot2 grob
}
\details{
This function is intended to help plot gene and transcript exon
models, and is a lightweight wrapper around \code{grl2df()}.

It takes \code{flatExonsByGene} which is the output from
\code{flattenExonsBy()}, and essentially plots the end result
for review.

Alternatively, when \code{return_type="df"}, the output is
the \code{data.frame} used to produce the ggplot, which allows
for more customization.
}
\examples{
## Assume we start with flattened gene exons
data(test_exon_wide_gr);
test_flatExonsByGene <- GenomicRanges::split(test_exon_wide_gr,
   GenomicRanges::values(test_exon_wide_gr)[,"gene_name"]);

# The most basic plot of exons
gene2gg(gene="TestGene1", flatExonsByGene=test_flatExonsByGene);

# You can be fancy and number the exons
test_flatExonsByGene <- assignGRLexonNames(test_flatExonsByGene,
   geneSymbolColname="gene_name");
gene2gg(gene="TestGene1", flatExonsByGene=test_flatExonsByGene);

# Or the exon labels can be hidden
gene2gg(gene="TestGene1", flatExonsByGene=test_flatExonsByGene, labelExons=FALSE)

if (1 == 2) {
   ## Do not run automated examples until sample data is available

ggGria1 <- gene2gg("Gria1",
   flatExonsByGene=flatExonsByGeneCds);

## if transcript exons are available
ggGria1 <- gene2gg("Gria1",
   flatExonsByGene=flatExonsByGene,
   flatExonsByTx=flatExonsByTx);

}

}
\seealso{
Other jam plot functions: 
\code{\link{bgaPlotly3d}()},
\code{\link{factor2label}()},
\code{\link{grl2df}()},
\code{\link{jitter_norm}()},
\code{\link{plotSashimi}()},
\code{\link{prepareSashimi}()},
\code{\link{stackJunctions}()}

Other jam ggplot2 functions: 
\code{\link{geom_diagonal_wide_arc}()},
\code{\link{plotSashimi}()},
\code{\link{splicejam-extensions}},
\code{\link{to_basic.GeomShape}()}

Other splicejam core functions: 
\code{\link{exoncov2polygon}()},
\code{\link{grl2df}()},
\code{\link{make_ref2compressed}()},
\code{\link{plotSashimi}()},
\code{\link{prepareSashimi}()}
}
\concept{jam ggplot2 functions}
\concept{jam plot functions}
\concept{splicejam core functions}
