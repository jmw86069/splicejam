% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/splicejam-geoms.R
\name{geom_diagonal_wide_arc}
\alias{geom_diagonal_wide_arc}
\alias{stat_diagonal_wide_arc}
\title{Draw an area defined by an upper and lower diagonal into an arc}
\usage{
stat_diagonal_wide_arc(
  mapping = NULL,
  data = NULL,
  geom = "shape",
  position = "identity",
  n = 100,
  strength = 0.5,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

geom_diagonal_wide_arc(
  mapping = NULL,
  data = NULL,
  stat = "diagonal_wide_arc",
  position = "identity",
  n = 100,
  na.rm = FALSE,
  strength = 0.5,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object to use to display the data, either as a
\code{ggproto} \code{Geom} subclass or as a string naming the geom stripped of the
\code{geom_} prefix (e.g. \code{"point"} rather than \code{"geom_point"})}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{n}{The number of points to create for each of the bounding diagonals}

\item{strength}{The proportion to move the control point along the x-axis
towards the other end of the bezier curve}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{stat}{The statistical transformation to use on the data for this
layer, either as a \code{ggproto} \code{Geom} subclass or as a string naming the
stat stripped of the \code{stat_} prefix (e.g. \code{"count"} rather than
\code{"stat_count"})}
}
\description{
The \code{geom_diagonal_wide_arc()} function draws a \emph{thick} diagonal, that is, a
polygon confined between a lower and upper \link[=geom_diagonal]{diagonal}. As with
the diagonal functions in \code{ggforce}, the wide diagonal variant is horizontal.
This function joins two adjacent diagonals into one wider arc.
}
\section{Aesthetics}{

geom_diagonal_wide_arc understand the following aesthetics
(required aesthetics are in bold):
\itemize{
\item \strong{x}
\item \strong{y}
\item \strong{group}
\item color
\item size
\item linetype
\item alpha
\item lineend
}
}

\examples{
data <- data.frame(
  x = c(1, 2, 2, 1, 2, 3, 3, 2),
  y = c(1, 2, 3, 2, 2, 1, 2, 3),
  group = c(1, 1, 1, 1, 1, 1, 1, 1)
)

ggplot(data) +
  geom_diagonal_wide_arc(aes(x, y, group=group))

# The strength control the steepness
ggplot(data, aes(x, y, group = group)) +
  geom_diagonal_wide_arc(strength=0.75, alpha=0.5, fill='red') +
  geom_diagonal_wide_arc(strength=0.25, alpha=0.5, fill='blue')

# The diagonal_wide_arc geom uses geom_shape under the hood, so corner rounding
# etc are all there
ggplot(data) +
  geom_diagonal_wide_arc(aes(x, y, group=group), radius=unit(5, 'mm'))

}
\seealso{
Other jam ggplot2 functions: 
\code{\link{gene2gg}()},
\code{\link{plotSashimi}()},
\code{\link{splicejam-extensions}},
\code{\link{to_basic.GeomShape}()}

Other jam ggplot2 functions: 
\code{\link{gene2gg}()},
\code{\link{plotSashimi}()},
\code{\link{splicejam-extensions}},
\code{\link{to_basic.GeomShape}()}

Other jam ggplot2 functions: 
\code{\link{gene2gg}()},
\code{\link{plotSashimi}()},
\code{\link{splicejam-extensions}},
\code{\link{to_basic.GeomShape}()}
}
\concept{jam ggplot2 functions}
