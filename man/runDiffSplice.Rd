% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jambio-tx.R
\name{runDiffSplice}
\alias{runDiffSplice}
\title{Perform differential isoform analysis using diffSplice}
\usage{
runDiffSplice(
  iMatrixTx,
  detectedTx = rownames(iMatrixTx),
  tx2geneDF,
  txColname = "transcript_id",
  geneColname = "gene_name",
  iDesign,
  iContrasts,
  cutoffFDR = 0.05,
  cutoffFold = 1.5,
  collapseByGene = TRUE,
  spliceTest = c("t", "simes", "F"),
  sep = " ",
  useVoom = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{iMatrixTx}{numeric matrix of expression, with transcripts as
rows and samples as columns. The data is assumed to be log2-transformed
using the format \code{log2(1 + x)}. This data should be normalized using
appropriate methods, outside the scope of this function.}

\item{detectedTx}{character vector containing all or a subset of
\code{rownames(iMatrix)} used for statistical testing.}

\item{tx2geneDF}{data.frame with colnames \code{c(txColname, geneColname)},
where all entries of \code{rownames(iMatrix)} are represented
in \code{tx2geneDF[,txColname]}.}

\item{txColname, geneColname}{the \code{colnames(tx2geneDF)} representing
the \code{rownames(iMatrixTx)} matched by \code{tx2geneDF[,txColname]},
and the associated genes given by \code{tx2geneDF[,geneColname]}.
Note that \code{detectedTx} must also contain values in \code{rownames(iMatrixTx)}
and \code{tx2geneDF[,txColname]}.}

\item{iDesign}{numeric matrix representing the design matrix for
the experiment design. For example, \code{limma::model.matrix(~0+group)}
will represent each group. Typically, \code{rownames(iDesign)} should
be defined to match the \code{colnames(iMatrix)} even if it requires
extra processing. The \code{colnames(iDesign)} should represent
group names used in \code{rownames(iContrasts)}.}

\item{iContrasts}{numeric matrix representing the contrasts used
in statistical comparisons. This matrix can be generated by
running \code{limma::makeContrasts()} using a format similar to the
following: \code{limma::makeContrasts(contrasts="group1-group2", levels=iDesign)},
see "Examples" for more info.}

\item{cutoffFDR}{numeric value indicating a statistical threshold
on the FDR (adjusted P-value). Values should be between 0 and 1, where
\code{cutoffFDR=1} would impose no threshold on the adjusted P-value.}

\item{cutoffFold}{numeric value indicating the minimum normal space
fold change allowed for statistical hits. For example \code{cutoffFold=2}
would require a 2-fold change, equivalent to log2 fold change >= 1.}

\item{collapseByGene}{logical indicating whether results should be
summarized at the gene level after filtering statistical hits.}

\item{spliceTest}{character value described in \code{limma::topSplice()}
which defines the statistical test to return. The default \code{"t"}
returns the t-test result for each isoform, which is mainly beneficial
because it also includes fold change that can be filtered. The
\code{"F"} returns F-test per gene, and \code{"simes"} returns the per-gene
t-test P-value after Simes adjustment per gene.}

\item{sep}{character value used as a delimiter in output data.frame
colnames, such that each stats is followed by the contrast name,
separated by this delimiter.}

\item{useVoom}{logical indicating whether to apply the \code{limma::voom()}
adjustment prior to running \code{limma::diffSplice()}. This value
should be \code{TRUE} when analyzing count or pseudocount data.}

\item{verbose}{logical indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\value{
list containing:
\itemize{
\item \code{detectedTx}, \code{detectedTxUse} the detectedTx
values representing genes with multiple transcripts;
\item \code{fit} the initial model fit;
\item \code{fit2} the contrast model fit;
\item \code{splice} the output from \code{limma::diffSplice()};
\item \code{statsDFs} list of data.frame output from \code{limma::topSplice()}
either at the transcript level or the gene level.
}

Note that when \code{collapseByGene=TRUE} the results will return the first
transcript entry per gene that has the best P-value. Often one gene
will have two transcripts with identical P-value, and the order
that the transcripts appear is inconsistent. Therefore, the direction
of fold change is not meaningful by itself, except with respect to
the specific isoform returned. See \code{limma::topSplice()} argument
\code{test} for more information about transcript- and gene-level
summaries.
}
\description{
Perform differential isoform analysis using diffSplice
}
\details{
This function is intended to be a convenient method
to call \code{limma::diffSplice()} and return the output of
\code{limma::topSplice()} in helpful formats for downstream
use.

The basic input required:
\itemize{
\item \code{iMatrixTx} a numeric matrix of transcript expression
\item \code{detectedTx} (optional) subset of \code{rownames(iMatrixTx)}, sometimes
determined by \code{defineDetectedTx()}.
\item \code{tx2geneDF} data.frame with "transcript_id" and "gene_name" columns.
This data.frame is often the same one used with \code{tximport::tximport()}
when importing transcriptome data to the gene level.
\item \code{iDesign},\code{iContrasts} design and contrast matrix, as created by
\code{groups2contrasts()}.
}

These steps are run in order:
\itemize{
\item \code{limma::voom()} (Optional.) This step is enabled with
the argument \code{useVoom=TRUE} and should only be used when \code{iMatrixTx}
contains count or pseudocount data. When using TPM or FPKM values,
set \code{useVoom=FALSE}.
\item \code{limma::lmFit()}
\item \code{limma::contrasts.fit()}
\item \code{limma::diffSplice()}
\item \code{limma::topSplice()} This function is called on each contrast
in order to return a list of data.frames.
}

Each contrast is tested for differential transcript expression.
No other contrasts are tested.

The output is a list with an element \code{"statsDFs"} that is itself
list of data.frames for each contrast. By default when
\code{collapseByGene=TRUE} each row is collapsed to gene level,
using the best statistical hit per gene as an exemplar.

The rows  of \code{iMatrixTx} are expected to contain expression values
per transcript isoform, but may contain alternative measurements
such as: junction counts per gene; exon expression per gene.

When \code{useVoom=TRUE}, the \code{iMatrixTx} data is exponentiated
prior to running \code{limma::voom()}, for the purpose of
calculating a weights matrix.
The original \code{iMatrixTx} data is used in \code{limma::lmFit()} as-is,
alongside the voom weights. The voom-normalized data is not
used. Therefore, the input data is assumed to be normalized.

Statistical results can be summarized at the gene level, after
applying thresholds for statistical hits in the form of
required adjusted P-value and/or fold change. It may be helpful
to review results per gene, alongside the specific transcript
isoforms which are called statistical hits.
}
\examples{
# example for defining iDesign
# first define a vector of sample groups
iGroups <- jamba::nameVector(paste(rep(c("WT", "KO"), each=6),
   rep(c("Control", "Treated"), each=3),
   sep="_"));
iGroups <- factor(iGroups, levels=unique(iGroups));
iGroups;
# next define sample identifiers
iSamples <- names(iGroups);

# given a vector of groups, make iDesign
iDesign <- stats::model.matrix(~0+iGroups);

# It is good practice to rename colnames(iDesign) and rownames(iDesign),
# that is, for the love of all that is good, use colnames and rownames
# that help confirm that these matrices are consistent.
colnames(iDesign) <- levels(iGroups);
rownames(iDesign) <- names(iGroups);
iDesign;

# define contrasts
# the example below includes a two-way contrast, which is a test
# of the pairwise fold changes
iContrasts <- limma::makeContrasts(contrasts=c(
   "WT_Treated-WT_Control", "KO_Treated-KO_Control",
   "(KO_Treated-KO_Control)-(WT_Treated-WT_Control)"),
   levels=iDesign);
iContrasts;

# for validation, verify these constraints:
# - all(rownames(iDesign) == iSamples)
# - colnames(iDesign) == the actual group names
# - all(colnames(iDesign) == rownames(iContrasts))
# you can see which samples are included in each test with crossproduct:
iDesign \%*\% iContrasts;

## Another efficient way to define iDesign and iContrasts:
iDC <- splicejam::groups2contrasts(iGroups, returnDesign=TRUE);
iDesign <- iDC$iDesign;
iContrasts <- iDC$iContrasts;

}
\references{
Law, CW, Chen, Y, Shi, W, and Smyth, GK (2014).
Voom: precision weights unlock linear model analysis
tools for RNA-seq read counts.
\emph{Genome Biology} \strong{15}, R29.
}
\seealso{
Other jam RNA-seq functions: 
\code{\link{assignGRLexonNames}()},
\code{\link{closestExonToJunctions}()},
\code{\link{combineGRcoverage}()},
\code{\link{defineDetectedTx}()},
\code{\link{detectedTxInfo}()},
\code{\link{exoncov2polygon}()},
\code{\link{flattenExonsBy}()},
\code{\link{getGRcoverageFromBw}()},
\code{\link{groups2contrasts}()},
\code{\link{internal_junc_score}()},
\code{\link{makeTx2geneFromGtf}()},
\code{\link{make_ref2compressed}()},
\code{\link{prepareSashimi}()},
\code{\link{sortSamples}()},
\code{\link{spliceGR2junctionDF}()}
}
\concept{jam RNA-seq functions}
