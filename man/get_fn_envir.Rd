% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/splicejam-shiny-data.R
\name{get_fn_envir}
\alias{get_fn_envir}
\title{Get value from function call or specific environment}
\usage{
get_fn_envir(x, envir = NULL, verbose = FALSE, ...)
}
\arguments{
\item{x}{\code{character} string indicating the name of an R object.}

\item{envir}{\code{environment} or \code{list} of \code{environment} objects.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}

\item{assign_to_envir}{\code{logical} indicating whether to assign values
to environment \code{envir}, if \code{envir} is not NULL. This option is
helpful to combine function arguments with environment values.}
}
\value{
object represented by variable name given in \code{x} from either
the calling function, or the environment \code{envir}, or \code{NULL}
if not defined in either case.
}
\description{
Get value from function call or specific environment in that order
}
\details{
This function is a helper function intended to return a
variable value, if it exists and is not NULL, by searching
these locations in order:
\enumerate{
\item The calling function, which is the environment of the
function that called \code{get_fn_envir()}.
\item The environment or environments provided in \code{envir}.
\item It returns \code{NULL} if the previous steps do not find
the object named by \code{x}.
}
}
\examples{
x <- 10;
get_fn_envir("x")

test_x <- function(x=NULL, envir=NULL, verbose=FALSE, ...) {
   get_fn_envir("x", envir, verbose=verbose)
}

test_x()

test_x(envir=globalenv())

test_x(x=5)

test_x(x=5, envir=globalenv())
test_x(x=NULL, envir=globalenv())

test_x(envir=globalenv())

# create new environment
testenv <- new.env();
testenv$x <- 100;

test_x(envir=testenv, verbose=TRUE)
test_x(x=1000, envir=testenv, verbose=TRUE)

# search testenv then globalenv()
test_x(x=12, envir=c(testenv, globalenv()), verbose=TRUE)
test_x(envir=c(testenv, globalenv()), verbose=TRUE)

testenv$x <- NULL;
test_x(envir=c(testenv, globalenv()), verbose=TRUE)

rm("x", envir=testenv);
test_x(envir=c(testenv, globalenv()), verbose=TRUE)

}
