% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jambio-plot.R
\name{exoncov2polygon}
\alias{exoncov2polygon}
\title{Convert exon coverage to polygons}
\usage{
exoncov2polygon(
  gr,
  covNames = NULL,
  sample_id = NULL,
  baseline = NULL,
  gapWidth = 250,
  doPlot = FALSE,
  coord_style = c("fortify", "base", "list", "all"),
  ref2c = NULL,
  compress_introns = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{gr}{GRanges where \code{colnames(GenomicRanges::values(gr))} is present in \code{covNames},
and contains data with class \code{NumericList}.}

\item{covNames}{character vector contained in \code{colnames(GenomicRanges::values(gr))}.}

\item{baseline}{numeric vector of length 0, 1 or \code{length(gr)}. If
\code{baseline} has names matching \code{names(gr)} they will be used for
each \code{gr} entry; if \code{baseline} is not named, it is extended
to \code{length(gr)}. The \code{baseline} value is added to the coverage
for each exon to offset the polygon as needed.}

\item{gapWidth}{numeric value sent to \code{make_ref2compressed()}.}

\item{coord_style}{character value to define the output style:
\code{"base"} returns a matrix with polygons separated by a row of \code{NA}
values; \code{"fortify"} returns a \code{data.frame} intended for ggplot2,
with columns \code{"cov"} and \code{"gr"} indicating the values in \code{covNames} and
\code{names(gr)} used to separate each polygon.}

\item{ref2c}{optional list containing output from \code{make_ref2compressed()},
used to compress the GRanges coordinates.}

\item{compress_introns}{logical indicating whether to compress
the coverage polygon coordinates to approximately the same
number of pixels per inch as the exon polygons. This option
greatly reduces the size of the polygon, since introns are
already about 50 to 100 times wider than exons, and when
\code{ref2c} is supplied, the introns are visibly compressed
to a fixed width on the x-axis. The data has many more
x-axis coordinates than the data visualization, this argument
is intended to reduce the intron coordinates accordingly.}

\item{verbose}{logical indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\value{
output dependent upon \code{coord_style}:
\itemize{
\item \code{"fortify"} returns \code{data.frame} in tall format, sufficient
to use with \code{ggplot2} functions. Each polygon is separated
by rows where \verb{x,y} values are \code{NA}.
\item \code{"list"} returns a \code{list} with \code{numeric} matrix objects.
\item \code{"base"} returns a \code{list} with \code{numeric} matrix objects,
each of which contains \code{NA} as the last coordinate, so that
each \code{matrix} can be \code{rbind()} and used for vectorized plotting.
\item \code{"all"} returns a \code{list} with all the data formats.
}
}
\description{
Convert exon coverage to polygons
}
\details{
This function is a workhorse function that converts a GRanges
object containing column values with NumericList coverage data,
into a full data.frame sufficient to define ggplot2 and other
coverage polygon plots.

An interesting argument is \code{baseline} which allows each exon
in the \code{gr} GRanges object to be offset from zero, in order to
make certain features visually easier to distinguish.

This function also calls \code{simplifyXY()} which reduces the
stored polygon detail for regions whose coordinates are compressed
on the x-axis, taking roughly the max value for each point.

The default output is roughly similar to \code{broom::tidy()} in
that it converts a custom R object into a tidy data.frame
suitable for use by ggplot2 and other tidy workflows.

The function \code{getGRcoverageFromBw()} takes a set of bigWig files
and returns a GRanges object whose columns contain NumericList data,
which is the intended input for \code{exoncov2polygon()}.
}
\examples{
# use some test data
suppressPackageStartupMessages(library(GenomicRanges));
suppressPackageStartupMessages(library(ggplot2));

data(test_cov_gr);
# prepare polygon coordinates
exondf <- exoncov2polygon(test_cov_gr, covNames="sample_A");
# create a ggplot
gg3 <- ggplot(exondf,
      aes(x=x, y=y, group=gr, fill=gr, color=gr)) +
   ggforce::geom_shape(alpha=0.8) +
   colorjam::theme_jam() +
   colorjam::scale_fill_jam() +
   colorjam::scale_color_jam();
print(gg3);

}
\seealso{
\code{test_cov_wide_gr()} for examples

Other jam GRanges functions: 
\code{\link{addGRLgaps}()},
\code{\link{addGRgaps}()},
\code{\link{annotateGRLfromGRL}()},
\code{\link{annotateGRfromGR}()},
\code{\link{assignGRLexonNames}()},
\code{\link{closestExonToJunctions}()},
\code{\link{combineGRcoverage}()},
\code{\link{findOverlapsGRL}()},
\code{\link{flattenExonsBy}()},
\code{\link{getFirstStrandedFromGRL}()},
\code{\link{getGRLgaps}()},
\code{\link{getGRcoverageFromBw}()},
\code{\link{getGRgaps}()},
\code{\link{grl2df}()},
\code{\link{jam_isDisjoint}()},
\code{\link{make_ref2compressed}()},
\code{\link{sortGRL}()},
\code{\link{spliceGR2junctionDF}()},
\code{\link{stackJunctions}()}

Other jam RNA-seq functions: 
\code{\link{assignGRLexonNames}()},
\code{\link{closestExonToJunctions}()},
\code{\link{combineGRcoverage}()},
\code{\link{defineDetectedTx}()},
\code{\link{detectedTxInfo}()},
\code{\link{flattenExonsBy}()},
\code{\link{getGRcoverageFromBw}()},
\code{\link{groups2contrasts}()},
\code{\link{internal_junc_score}()},
\code{\link{makeTx2geneFromGtf}()},
\code{\link{make_ref2compressed}()},
\code{\link{prepareSashimi}()},
\code{\link{runDiffSplice}()},
\code{\link{sortSamples}()},
\code{\link{spliceGR2junctionDF}()}

Other splicejam core functions: 
\code{\link{gene2gg}()},
\code{\link{grl2df}()},
\code{\link{make_ref2compressed}()},
\code{\link{plotSashimi}()},
\code{\link{prepareSashimi}()}
}
\concept{jam GRanges functions}
\concept{jam RNA-seq functions}
\concept{splicejam core functions}
