% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jambio-gr-coverage.R
\name{getGRcoverageFromBw}
\alias{getGRcoverageFromBw}
\title{Get coverage for GRanges from bigWig files}
\usage{
getGRcoverageFromBw(
  gr,
  bwUrls,
  addGaps = FALSE,
  gap_feature_type = "gap",
  default_feature_type = "exon",
  feature_type_colname = "feature_type",
  use_memoise = FALSE,
  memoise_coverage_path = "coverage_memoise",
  do_shiny_progress = FALSE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{gr}{GRanges object}

\item{bwUrls}{character vector of full file paths or web URLs
to bigWig files, suitable for use by \code{rtracklayer::import()}.}

\item{addGaps}{logical indicating whether gaps between GRanges
should be added to the query. Gaps are determined using
\code{getGRgaps()}. Practically, when \code{addGaps=TRUE} loads the
coverage data between exons, which can be a substantially
larger region than exons. When \code{addGaps=FALSE} the coverage
data is not loaded in intron/gap regions, and therefore is
not displayed in downstream plots like sashimi plots.}

\item{feature_type_colname, gap_feature_type, default_feature_type}{When \code{addGaps=TRUE} a
new column named using \code{feature_type_colname} is added to \code{values(gr)},
whose value for gap regions is \code{gap_feature_type}. When
\code{feature_type_colname} is already present in \code{gr} it is not modified,
otherwise the column is created with value \code{default_feature_type}.
By default, this function adds a column \code{"feature_type"} with
value \code{"gap"}.}

\item{use_memoise}{logical indicating whether to use \code{memoise::memoise()}
to store coverage data in cache files, which can be re-used in
subsequent R sessions, given consistent values for
\code{memoise_coverage_path}.
Note that the primary reason to use memoise during this step,
is that cache files will be stored \emph{for each bigWig file} and
not for the set of bigWig files. For example, adding one bigWig
file to \code{bwUrls} will cause creating of one new memoise cache file,
but will re-use any pre-existing memoise cache files for the
previously cached \code{bwUrls} entries.}

\item{memoise_coverage_path}{character path to file folder
used to store coverage data in memoise cache files.
By default, the folder is a subfolder of
the current working directory (see \code{getwd()}) so it should be
changed to an absolute path if needed for wider re-use in any
working directory.}

\item{do_shiny_progress}{logical indicating whether to update
shiny progress bar, using \code{shiny::setProgress()}. It assumes
the progress bar is already initiated.}

\item{verbose}{logical indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\value{
DataFrame object, whose colnames are defined using
either \code{names(bwUrls)} or by \code{jamba::makeNames(basename(bwUrls))}
then removing the \code{.bw} or \code{.bigWig} file extension,
case-insensitively.
Each column is type \code{IRanges::NumericList-class} which is a
list of numeric coverage values.
}
\description{
Get coverage for GRanges from bigWig files
}
\details{
This function takes a GRanges object to define genomic regions,
for which coverage data is loaded for each \code{bwUrls} input file.

Note that this function uses \code{rtracklayer::import.bw()} which
they describe does not work on the Windows platform.

Update in version 0.0.68.900: This function was updated in two
subtle ways, to work around a bug in \code{rtracklater::import.bw()},
which returns data sorted by chromosome in the order it is indexed
in the bigWig file, then within each chromosome entries are returned
in the order requested. This \code{getGRcoverageFromBw()} was updated to:
\enumerate{
\item Confirm input \code{gr} GRanges contains names, or assigns names
as needed.
\item The output coverage from \code{rtracklayer::import.gw()} is ordered
by \code{names(gr)} to confirm the output coverage is returned in the
identical order as requested.
}

The updates above were done outside the scope of memoise file caching,
so that stored coverage cache files will still be valid, but the
order of named entries from the cache will be dependent upon the
order requested. In the event the cache coverage contains no names,
they will be returned in the same order as stored, however it is
possible the cache will be invalidated by the addition of names
to \code{gr}, though unclear exactly how deeply memoise checks such things.
}
\seealso{
Other jam GRanges functions: 
\code{\link{addGRLgaps}()},
\code{\link{addGRgaps}()},
\code{\link{annotateGRLfromGRL}()},
\code{\link{annotateGRfromGR}()},
\code{\link{assignGRLexonNames}()},
\code{\link{closestExonToJunctions}()},
\code{\link{combineGRcoverage}()},
\code{\link{exoncov2polygon}()},
\code{\link{findOverlapsGRL}()},
\code{\link{flattenExonsBy}()},
\code{\link{getFirstStrandedFromGRL}()},
\code{\link{getGRLgaps}()},
\code{\link{getGRgaps}()},
\code{\link{grl2df}()},
\code{\link{jam_isDisjoint}()},
\code{\link{make_ref2compressed}()},
\code{\link{sortGRL}()},
\code{\link{spliceGR2junctionDF}()},
\code{\link{stackJunctions}()}

Other jam RNA-seq functions: 
\code{\link{assignGRLexonNames}()},
\code{\link{closestExonToJunctions}()},
\code{\link{combineGRcoverage}()},
\code{\link{defineDetectedTx}()},
\code{\link{detectedTxInfo}()},
\code{\link{exoncov2polygon}()},
\code{\link{flattenExonsBy}()},
\code{\link{groups2contrasts}()},
\code{\link{internal_junc_score}()},
\code{\link{makeTx2geneFromGtf}()},
\code{\link{make_ref2compressed}()},
\code{\link{prepareSashimi}()},
\code{\link{runDiffSplice}()},
\code{\link{sortSamples}()},
\code{\link{spliceGR2junctionDF}()}
}
\concept{jam GRanges functions}
\concept{jam RNA-seq functions}
